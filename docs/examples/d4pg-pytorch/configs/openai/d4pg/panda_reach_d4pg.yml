# Environment parameters

env: EndEffectorPositioningPandaSim-v0
state_dim: 37
action_dim: 7
action_low: -1
action_high: 1
num_agents: 0
random_seed: 2019

# Training parameters


model: d4pg
batch_size: 256
num_steps_train: 15000000 # number of episodes from all agents
max_ep_length: 7000 # maximum number of steps per episode (def: 1000)
replay_mem_size: 1000000 # maximum capacity of replay memory
priority_alpha: 0.1 # controls the randomness vs prioritisation of the prioritised sampling (0.0 = Uniform sampling, 1.0 = Greedy prioritisation)
priority_beta_start: 0.4 # starting value of beta - controls to what degree IS weights influence the gradient updates to correct for the bias introduces by priority sampling (0 - no correction, 1 - full correction)
priority_beta_end: 5.0 # beta will be linearly annelaed from its start value to this value thoughout training
discount_rate: 0.99 # Discount rate (gamma) for future rewards
n_step_returns: 5 # number of future steps to collect experiences for N-step returns
update_agent_ep: 1 # agent gets latest parameters from learner every update_agent_ep episodes
replay_queue_size: 1024 # queue with replays from all the agents
batch_queue_size: 100 # queue with batches given to learner
replay_memory_prioritized: 0
num_episode_save: 100
device: cuda
agent_device: cpu
save_buffer_on_disk: 1
save_reward_threshold: 1 # difference in best reward to save agent model


# Network parameters

critic_learning_rate: 0.0001 #0.001 default
actor_learning_rate: 0.0001  #0.001 default
dense_size: 256 # size of the 2 hidden layers in networks
num_atoms: 51 # number of atoms in output layer of distributed critic
v_min: -600 # lower bound of critic value output distribution
v_max: 300 # upper bound of critic value output distribution
tau: 0.005 # parameter for soft target network updates

# Miscellaneous
results_path: results
load_path: '/home/farhang/robo-gym/docs/examples/d4pg-pytorch/velocity_controller_follow_episode_1200.pt'
